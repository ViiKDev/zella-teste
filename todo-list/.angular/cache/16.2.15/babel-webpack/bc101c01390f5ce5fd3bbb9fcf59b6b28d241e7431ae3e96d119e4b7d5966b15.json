{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.API_URL = 'http://localhost:5203/api/user';\n  }\n  signUp(userObj) {\n    return this.httpClient.post(`${this.API_URL}/register`, userObj);\n  }\n  login(loginObj) {\n    return this.httpClient.post(`${this.API_URL}/authenticate`, loginObj);\n  }\n  storeToken(tokenValue) {\n    localStorage.setItem('token', tokenValue);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  updateUserInfo(info) {}\n  decodeToken() {}\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","httpClient","API_URL","signUp","userObj","post","login","loginObj","storeToken","tokenValue","localStorage","setItem","getToken","getItem","isLoggedIn","updateUserInfo","info","decodeToken","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/programmer/Desktop/Projects/Angular/ZellaProject/todo-list/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private API_URL: string = 'http://localhost:5203/api/user';\n\n  constructor(private httpClient: HttpClient) { }\n\n  signUp(userObj: any) {\n    return this.httpClient.post<any>(`${this.API_URL}/register`, userObj);\n  }\n  login(loginObj: any) {\n    return this.httpClient.post<any>(`${this.API_URL}/authenticate`, loginObj);\n  }\n  storeToken(tokenValue: string) {\n    localStorage.setItem('token', tokenValue)\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n  updateUserInfo(info: any) {\n\n  }\n  decodeToken() {\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,OAAO,GAAW,gCAAgC;EAEZ;EAE9CC,MAAMA,CAACC,OAAY;IACjB,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CAAM,GAAG,IAAI,CAACH,OAAO,WAAW,EAAEE,OAAO,CAAC;EACvE;EACAE,KAAKA,CAACC,QAAa;IACjB,OAAO,IAAI,CAACN,UAAU,CAACI,IAAI,CAAM,GAAG,IAAI,CAACH,OAAO,eAAe,EAAEK,QAAQ,CAAC;EAC5E;EACAC,UAAUA,CAACC,UAAkB;IAC3BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,UAAU,CAAC;EAC3C;EACAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EACAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAACJ,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACxC;EACAE,cAAcA,CAACC,IAAS,GAExB;EACAC,WAAWA,CAAA,GACX;EAAC,QAAAC,CAAA,G;qBAxBUnB,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXxB,WAAW;IAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}