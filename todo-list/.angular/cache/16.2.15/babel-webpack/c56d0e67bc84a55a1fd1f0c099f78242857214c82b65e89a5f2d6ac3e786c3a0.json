{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TodoItemsService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.API_URL = 'http://localhost:5203/api/todo-items';\n  }\n  static #_ = this.refreshStatus = new EventEmitter(); // static todoItems = [\n  //   {\n  //     title: \"Walk with the dog\",\n  //     description: \"Take the dog on a long walk because it needs to get rid of all the fatness\",\n  //     createdAt: \"2024-12-23\",\n  //     completedAt: null,\n  //     estimatedAt: \"2024-12-20\"\n  //   },\n  //   {\n  //     title: \"Drink water\",\n  //     description: \"Get hydrated\",\n  //     createdAt: \"2024-12-21\",\n  //     completedAt: \"2024-12-20\",\n  //     estimatedAt: \"2024-12-20\"\n  //   },\n  //   {\n  //     title: \"Finish project\",\n  //     description: \"Zella project\",\n  //     createdAt: \"2024-12-22\",\n  //     completedAt: \"2024-12-20\",\n  //     estimatedAt: \"2024-12-20\"\n  //   }\n  // ];\n  // 'http://localhost:5203/api/todo-items'\n  getTodoItems() {\n    const response = this.httpClient.get(this.API_URL);\n    return response;\n  }\n  updateTodoItem(item) {\n    const response = this.httpClient.put(`${this.API_URL}/${item.id}`, item);\n    TodoItemsService.refreshStatus.emit('update');\n    return response;\n  }\n  deleteTodoItem(item) {\n    const response = this.httpClient.delete(`${this.API_URL}/${item.id}`);\n    TodoItemsService.refreshStatus.emit('delete');\n    return response;\n  }\n  createTodoItem(item) {\n    this.httpClient.post(`${this.API_URL}`, item).subscribe(res => {\n      TodoItemsService.refreshStatus.emit('create');\n      return res;\n    });\n    // return response;\n  }\n  // getTodoItems() {\n  //   let items = this.ascendingDateSort(TodoItemsService.todoItems)\n  //   return items;\n  // }\n  ascendingDateSort(items) {\n    let sorted = items.sort((a, b) => {\n      return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n    });\n    return sorted;\n  }\n  descendingDateSort(items) {\n    let sorted = items.sort((a, b) => {\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    });\n    return sorted;\n  }\n  static #_2 = this.ɵfac = function TodoItemsService_Factory(t) {\n    return new (t || TodoItemsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_3 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoItemsService,\n    factory: TodoItemsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EventEmitter","TodoItemsService","constructor","httpClient","API_URL","_","refreshStatus","getTodoItems","response","get","updateTodoItem","item","put","id","emit","deleteTodoItem","delete","createTodoItem","post","subscribe","res","ascendingDateSort","items","sorted","sort","a","b","Date","createdAt","getTime","descendingDateSort","_2","i0","ɵɵinject","i1","HttpClient","_3","factory","ɵfac","providedIn"],"sources":["/home/programmer/Desktop/Projects/Angular/ZellaProject/todo-list/src/app/services/todo-items.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { EventEmitter, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoItemsService {\n  constructor(private httpClient: HttpClient) { }\n\n  static refreshStatus = new EventEmitter();\n\n  API_URL: string = 'http://localhost:5203/api/todo-items';\n\n  // static todoItems = [\n  //   {\n  //     title: \"Walk with the dog\",\n  //     description: \"Take the dog on a long walk because it needs to get rid of all the fatness\",\n  //     createdAt: \"2024-12-23\",\n  //     completedAt: null,\n  //     estimatedAt: \"2024-12-20\"\n  //   },\n  //   {\n  //     title: \"Drink water\",\n  //     description: \"Get hydrated\",\n  //     createdAt: \"2024-12-21\",\n  //     completedAt: \"2024-12-20\",\n  //     estimatedAt: \"2024-12-20\"\n  //   },\n  //   {\n  //     title: \"Finish project\",\n  //     description: \"Zella project\",\n  //     createdAt: \"2024-12-22\",\n  //     completedAt: \"2024-12-20\",\n  //     estimatedAt: \"2024-12-20\"\n  //   }\n  // ];\n\n  // 'http://localhost:5203/api/todo-items'\n\n  getTodoItems() {\n    const response = this.httpClient.get<any>(this.API_URL);\n    return response;\n  }\n\n  updateTodoItem(item: any) {\n    const response = this.httpClient.put<any>(`${this.API_URL}/${item.id}`, item);\n    TodoItemsService.refreshStatus.emit('update');\n    return response;\n  }\n\n  deleteTodoItem(item: any) {\n    const response = this.httpClient.delete<any>(`${this.API_URL}/${item.id}`);\n    TodoItemsService.refreshStatus.emit('delete');\n    return response;\n  }\n\n  createTodoItem(item: any) {\n    this.httpClient.post<any>(`${this.API_URL}`, item).subscribe(\n      (res) => {\n        TodoItemsService.refreshStatus.emit('create');\n        return res;\n      }\n    );\n    // return response;\n  }\n\n  // getTodoItems() {\n  //   let items = this.ascendingDateSort(TodoItemsService.todoItems)\n  //   return items;\n  // }\n\n  ascendingDateSort(items: any) {\n    let sorted = items.sort((a: any, b: any) => { return (new Date(a.createdAt).getTime()) - (new Date(b.createdAt)).getTime(); })\n    return sorted;\n  }\n\n  descendingDateSort(items: any) {\n    let sorted = items.sort((a: any, b: any) => { return (new Date(b.createdAt).getTime()) - (new Date(a.createdAt)).getTime(); })\n    return sorted;\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAoB,eAAe;;;AAKxD,OAAM,MAAOC,gBAAgB;EAC3BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAI9B,KAAAC,OAAO,GAAW,sCAAsC;EAJV;EAAC,QAAAC,CAAA,GAExC,KAAAC,aAAa,GAAG,IAAIN,YAAY,EAAE,EAIzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEAO,YAAYA,CAAA;IACV,MAAMC,QAAQ,GAAG,IAAI,CAACL,UAAU,CAACM,GAAG,CAAM,IAAI,CAACL,OAAO,CAAC;IACvD,OAAOI,QAAQ;EACjB;EAEAE,cAAcA,CAACC,IAAS;IACtB,MAAMH,QAAQ,GAAG,IAAI,CAACL,UAAU,CAACS,GAAG,CAAM,GAAG,IAAI,CAACR,OAAO,IAAIO,IAAI,CAACE,EAAE,EAAE,EAAEF,IAAI,CAAC;IAC7EV,gBAAgB,CAACK,aAAa,CAACQ,IAAI,CAAC,QAAQ,CAAC;IAC7C,OAAON,QAAQ;EACjB;EAEAO,cAAcA,CAACJ,IAAS;IACtB,MAAMH,QAAQ,GAAG,IAAI,CAACL,UAAU,CAACa,MAAM,CAAM,GAAG,IAAI,CAACZ,OAAO,IAAIO,IAAI,CAACE,EAAE,EAAE,CAAC;IAC1EZ,gBAAgB,CAACK,aAAa,CAACQ,IAAI,CAAC,QAAQ,CAAC;IAC7C,OAAON,QAAQ;EACjB;EAEAS,cAAcA,CAACN,IAAS;IACtB,IAAI,CAACR,UAAU,CAACe,IAAI,CAAM,GAAG,IAAI,CAACd,OAAO,EAAE,EAAEO,IAAI,CAAC,CAACQ,SAAS,CACzDC,GAAG,IAAI;MACNnB,gBAAgB,CAACK,aAAa,CAACQ,IAAI,CAAC,QAAQ,CAAC;MAC7C,OAAOM,GAAG;IACZ,CAAC,CACF;IACD;EACF;EAEA;EACA;EACA;EACA;EAEAC,iBAAiBA,CAACC,KAAU;IAC1B,IAAIC,MAAM,GAAGD,KAAK,CAACE,IAAI,CAAC,CAACC,CAAM,EAAEC,CAAM,KAAI;MAAG,OAAQ,IAAIC,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAACC,OAAO,EAAE,GAAK,IAAIF,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAAEC,OAAO,EAAE;IAAE,CAAC,CAAC;IAC9H,OAAON,MAAM;EACf;EAEAO,kBAAkBA,CAACR,KAAU;IAC3B,IAAIC,MAAM,GAAGD,KAAK,CAACE,IAAI,CAAC,CAACC,CAAM,EAAEC,CAAM,KAAI;MAAG,OAAQ,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAACC,OAAO,EAAE,GAAK,IAAIF,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAAEC,OAAO,EAAE;IAAE,CAAC,CAAC;IAC9H,OAAON,MAAM;EACf;EAAC,QAAAQ,EAAA,G;qBAzEU9B,gBAAgB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBnC,gBAAgB;IAAAoC,OAAA,EAAhBpC,gBAAgB,CAAAqC,IAAA;IAAAC,UAAA,EAFf;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}