{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.showPassword = false;\n    this.signUpActive = false;\n    this.actionInProgress = false;\n  }\n  ngOnInit() {\n    if (this.authService.isLoggedIn()) this.router.navigate(['home']);\n    this.loginForm = this.fb.group({\n      email: ['', Validators.required],\n      passwordHash: ['', Validators.required]\n    });\n    this.signUpForm = this.fb.group({\n      email: ['', Validators.required],\n      passwordHash: ['', Validators.required]\n    });\n  }\n  showPasswordClick(event) {\n    this.showPassword = !this.showPassword;\n    event.stopPropagation();\n  }\n  onSubmitLogin() {\n    this.actionInProgress = true;\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value).subscribe({\n        next: res => {\n          this.actionInProgress = false;\n          console.log(res.token);\n          this.authService.storeToken(res.token);\n          this.loginForm.reset();\n          this.router.navigate(['home']);\n        },\n        error: err => {\n          console.log(err.error.message);\n          this.actionInProgress = false;\n        }\n      });\n    } else {\n      console.log(\"Form not valid\");\n      this.validateAllFormFields(this.loginForm);\n    }\n  }\n  onSubmitSignUp() {\n    this.actionInProgress = true;\n    if (this.signUpForm.valid) {\n      this.authService.signUp(this.signUpForm.value).subscribe({\n        next: res => {\n          this.actionInProgress = false;\n          console.log(res.message);\n          this.signUpForm.reset();\n          this.signUpActive = false;\n        },\n        error: err => {\n          this.actionInProgress = false;\n          console.log(err.error.message);\n        }\n      });\n    } else {\n      console.log(\"Form not valid\");\n      this.validateAllFormFields(this.signUpForm);\n    }\n  }\n  validateAllFormFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl) {\n        control.markAsDirty({\n          onlySelf: true\n        });\n      } else if (control instanceof FormGroup) {\n        this.validateAllFormFields(control);\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.sass']\n})], LoginComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","LoginComponent","constructor","fb","authService","router","showPassword","signUpActive","actionInProgress","ngOnInit","isLoggedIn","navigate","loginForm","group","email","required","passwordHash","signUpForm","showPasswordClick","event","stopPropagation","onSubmitLogin","valid","login","value","subscribe","next","res","console","log","token","storeToken","reset","error","err","message","validateAllFormFields","onSubmitSignUp","signUp","formGroup","Object","keys","controls","forEach","field","control","get","markAsDirty","onlySelf","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/programmer/Desktop/Projects/Angular/ZellaProject/todo-list/src/app/login/login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.sass']\n})\nexport class LoginComponent implements OnInit {\n  showPassword: boolean = false;\n  signUpActive: boolean = false;\n  loginForm!: FormGroup;\n  signUpForm!: FormGroup;\n  actionInProgress: boolean = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n  }\n\n  ngOnInit(): void {\n    if (this.authService.isLoggedIn()) this.router.navigate(['home']);\n    this.loginForm = this.fb.group({\n      email: ['', Validators.required],\n      passwordHash: ['', Validators.required]\n    });\n    this.signUpForm = this.fb.group({\n      email: ['', Validators.required],\n      passwordHash: ['', Validators.required]\n    });\n  }\n\n  showPasswordClick(event: any) {\n    this.showPassword = !this.showPassword;\n    event.stopPropagation();\n  }\n\n  onSubmitLogin() {\n    this.actionInProgress = true;\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value)\n        .subscribe({\n          next: (res) => {\n            this.actionInProgress = false;\n            console.log(res.token);\n            this.authService.storeToken(res.token);\n            this.loginForm.reset();\n            this.router.navigate(['home']);\n          },\n          error: (err) => {\n            console.log(err.error.message);\n            this.actionInProgress = false;\n          }\n        });\n    } else {\n      console.log(\"Form not valid\");\n      this.validateAllFormFields(this.loginForm);\n    }\n  }\n\n  onSubmitSignUp() {\n    this.actionInProgress = true;\n    if (this.signUpForm.valid) {\n      this.authService.signUp(this.signUpForm.value)\n        .subscribe({\n          next: (res) => {\n            this.actionInProgress = false;\n            console.log(res.message);\n            this.signUpForm.reset();\n            this.signUpActive = false;\n          },\n          error: (err) => {\n            this.actionInProgress = false;\n            console.log(err.error.message);\n          }\n        });\n    } else {\n      console.log(\"Form not valid\");\n      this.validateAllFormFields(this.signUpForm);\n    }\n  }\n\n  private validateAllFormFields(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl) {\n        control.markAsDirty({ onlySelf: true })\n      } else if (control instanceof FormGroup) {\n        this.validateAllFormFields(control);\n      }\n    })\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AASzE,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAOzBC,YACUC,EAAe,EACfC,WAAwB,EACxBC,MAAc;IAFd,KAAAF,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IAThB,KAAAC,YAAY,GAAY,KAAK;IAC7B,KAAAC,YAAY,GAAY,KAAK;IAG7B,KAAAC,gBAAgB,GAAY,KAAK;EAOjC;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACL,WAAW,CAACM,UAAU,EAAE,EAAE,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IACjE,IAAI,CAACC,SAAS,GAAG,IAAI,CAACT,EAAE,CAACU,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACe,QAAQ,CAAC;MAChCC,YAAY,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACe,QAAQ;KACvC,CAAC;IACF,IAAI,CAACE,UAAU,GAAG,IAAI,CAACd,EAAE,CAACU,KAAK,CAAC;MAC9BC,KAAK,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACe,QAAQ,CAAC;MAChCC,YAAY,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACe,QAAQ;KACvC,CAAC;EACJ;EAEAG,iBAAiBA,CAACC,KAAU;IAC1B,IAAI,CAACb,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;IACtCa,KAAK,CAACC,eAAe,EAAE;EACzB;EAEAC,aAAaA,CAAA;IACX,IAAI,CAACb,gBAAgB,GAAG,IAAI;IAC5B,IAAI,IAAI,CAACI,SAAS,CAACU,KAAK,EAAE;MACxB,IAAI,CAAClB,WAAW,CAACmB,KAAK,CAAC,IAAI,CAACX,SAAS,CAACY,KAAK,CAAC,CACzCC,SAAS,CAAC;QACTC,IAAI,EAAGC,GAAG,IAAI;UACZ,IAAI,CAACnB,gBAAgB,GAAG,KAAK;UAC7BoB,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,KAAK,CAAC;UACtB,IAAI,CAAC1B,WAAW,CAAC2B,UAAU,CAACJ,GAAG,CAACG,KAAK,CAAC;UACtC,IAAI,CAAClB,SAAS,CAACoB,KAAK,EAAE;UACtB,IAAI,CAAC3B,MAAM,CAACM,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC;QACDsB,KAAK,EAAGC,GAAG,IAAI;UACbN,OAAO,CAACC,GAAG,CAACK,GAAG,CAACD,KAAK,CAACE,OAAO,CAAC;UAC9B,IAAI,CAAC3B,gBAAgB,GAAG,KAAK;QAC/B;OACD,CAAC;KACL,MAAM;MACLoB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,IAAI,CAACO,qBAAqB,CAAC,IAAI,CAACxB,SAAS,CAAC;;EAE9C;EAEAyB,cAAcA,CAAA;IACZ,IAAI,CAAC7B,gBAAgB,GAAG,IAAI;IAC5B,IAAI,IAAI,CAACS,UAAU,CAACK,KAAK,EAAE;MACzB,IAAI,CAAClB,WAAW,CAACkC,MAAM,CAAC,IAAI,CAACrB,UAAU,CAACO,KAAK,CAAC,CAC3CC,SAAS,CAAC;QACTC,IAAI,EAAGC,GAAG,IAAI;UACZ,IAAI,CAACnB,gBAAgB,GAAG,KAAK;UAC7BoB,OAAO,CAACC,GAAG,CAACF,GAAG,CAACQ,OAAO,CAAC;UACxB,IAAI,CAAClB,UAAU,CAACe,KAAK,EAAE;UACvB,IAAI,CAACzB,YAAY,GAAG,KAAK;QAC3B,CAAC;QACD0B,KAAK,EAAGC,GAAG,IAAI;UACb,IAAI,CAAC1B,gBAAgB,GAAG,KAAK;UAC7BoB,OAAO,CAACC,GAAG,CAACK,GAAG,CAACD,KAAK,CAACE,OAAO,CAAC;QAChC;OACD,CAAC;KACL,MAAM;MACLP,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,IAAI,CAACO,qBAAqB,CAAC,IAAI,CAACnB,UAAU,CAAC;;EAE/C;EAEQmB,qBAAqBA,CAACG,SAAoB;IAChDC,MAAM,CAACC,IAAI,CAACF,SAAS,CAACG,QAAQ,CAAC,CAACC,OAAO,CAACC,KAAK,IAAG;MAC9C,MAAMC,OAAO,GAAGN,SAAS,CAACO,GAAG,CAACF,KAAK,CAAC;MACpC,IAAIC,OAAO,YAAY/C,WAAW,EAAE;QAClC+C,OAAO,CAACE,WAAW,CAAC;UAAEC,QAAQ,EAAE;QAAI,CAAE,CAAC;OACxC,MAAM,IAAIH,OAAO,YAAY9C,SAAS,EAAE;QACvC,IAAI,CAACqC,qBAAqB,CAACS,OAAO,CAAC;;IAEvC,CAAC,CAAC;EACJ;CACD;AAtFY5C,cAAc,GAAAgD,UAAA,EAL1BpD,SAAS,CAAC;EACTqD,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWnD,cAAc,CAsF1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}