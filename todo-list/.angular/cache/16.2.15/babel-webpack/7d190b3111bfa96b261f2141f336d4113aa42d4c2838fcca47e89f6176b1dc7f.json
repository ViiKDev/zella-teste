{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class UtilsService {\n  generateDate() {\n    return `${this.date.year}-${this.date.month}-${this.date.day}`;\n  }\n  convertDate(date) {\n    let newDate = date.split(\"-\").reverse().join(\"/\");\n    if (newDate == date) {\n      newDate = date.split(\"/\").reverse().join(\"-\");\n    }\n    return newDate;\n  }\n  leadingZeros(amount, value) {\n    return value.toString().padStart(amount, \"0\");\n  }\n  deepCopy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  constructor() {\n    this.dateOrig = new Date();\n    this.date = {\n      day: this.leadingZeros(2, this.dateOrig.getDate()),\n      month: this.leadingZeros(2, this.dateOrig.getMonth() + 1),\n      year: this.leadingZeros(2, this.dateOrig.getFullYear())\n    };\n  }\n  static #_ = this.ɵfac = function UtilsService_Factory(t) {\n    return new (t || UtilsService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtilsService,\n    factory: UtilsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UtilsService","generateDate","date","year","month","day","convertDate","newDate","split","reverse","join","leadingZeros","amount","value","toString","padStart","deepCopy","obj","JSON","parse","stringify","constructor","dateOrig","Date","getDate","getMonth","getFullYear","_","_2","factory","ɵfac","providedIn"],"sources":["/home/programmer/Desktop/Projects/Angular/todo-list/src/app/services/utils.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilsService {\n  dateOrig = new Date();\n  date = {\n    day: this.leadingZeros(2, this.dateOrig.getDate()),\n    month: this.leadingZeros(2, this.dateOrig.getMonth() + 1),\n    year: this.leadingZeros(2, this.dateOrig.getFullYear())\n  }\n  generateDate() {\n    return `${this.date.year}-${this.date.month}-${this.date.day}`;\n  }\n  convertDate(date: string) {\n    let newDate = date.split(\"-\").reverse().join(\"/\");\n    if (newDate == date) {\n      newDate = date.split(\"/\").reverse().join(\"-\");\n    }\n    return newDate;\n  }\n  leadingZeros(amount: number, value: number | string) {\n    return value.toString().padStart(amount, \"0\");\n  }\n  deepCopy(obj: any) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  constructor() { }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,YAAY;EAOvBC,YAAYA,CAAA;IACV,OAAO,GAAG,IAAI,CAACC,IAAI,CAACC,IAAI,IAAI,IAAI,CAACD,IAAI,CAACE,KAAK,IAAI,IAAI,CAACF,IAAI,CAACG,GAAG,EAAE;EAChE;EACAC,WAAWA,CAACJ,IAAY;IACtB,IAAIK,OAAO,GAAGL,IAAI,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,EAAE,CAACC,IAAI,CAAC,GAAG,CAAC;IACjD,IAAIH,OAAO,IAAIL,IAAI,EAAE;MACnBK,OAAO,GAAGL,IAAI,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,EAAE,CAACC,IAAI,CAAC,GAAG,CAAC;;IAE/C,OAAOH,OAAO;EAChB;EACAI,YAAYA,CAACC,MAAc,EAAEC,KAAsB;IACjD,OAAOA,KAAK,CAACC,QAAQ,EAAE,CAACC,QAAQ,CAACH,MAAM,EAAE,GAAG,CAAC;EAC/C;EACAI,QAAQA,CAACC,GAAQ;IACf,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,GAAG,CAAC,CAAC;EACxC;EAEAI,YAAA;IAvBA,KAAAC,QAAQ,GAAG,IAAIC,IAAI,EAAE;IACrB,KAAArB,IAAI,GAAG;MACLG,GAAG,EAAE,IAAI,CAACM,YAAY,CAAC,CAAC,EAAE,IAAI,CAACW,QAAQ,CAACE,OAAO,EAAE,CAAC;MAClDpB,KAAK,EAAE,IAAI,CAACO,YAAY,CAAC,CAAC,EAAE,IAAI,CAACW,QAAQ,CAACG,QAAQ,EAAE,GAAG,CAAC,CAAC;MACzDtB,IAAI,EAAE,IAAI,CAACQ,YAAY,CAAC,CAAC,EAAE,IAAI,CAACW,QAAQ,CAACI,WAAW,EAAE;KACvD;EAkBe;EAAC,QAAAC,CAAA,G;qBAxBN3B,YAAY;EAAA;EAAA,QAAA4B,EAAA,G;WAAZ5B,YAAY;IAAA6B,OAAA,EAAZ7B,YAAY,CAAA8B,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}